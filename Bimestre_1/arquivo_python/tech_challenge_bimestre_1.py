# -*- coding: utf-8 -*-
"""tech_challenge_bimestre_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19gn-KvObwet8kLGEVu3HG3Yw4cFW_cGe

##Realiza a importação das bibliotecas.
"""

import pandas as pd
from google.colab import files
#import numpy as np

"""## **Base 1: Exportação de vinhos**"""

#Dados de exportação de vinho [23/10/2023]
#http://vitibrasil.cnpuv.embrapa.br/index.php?opcao=opt_06
dados_exportacao_vinho = pd.read_csv( 'https://raw.githubusercontent.com/Trabalhinho/FIAP_Tech_Challenge/main/Bimestre_1/bases_sem_tratamento/base_exportacao_vinho.csv',
                                     sep = ';' )
dados_exportacao_vinho.head()

"""###Checando a base"""

#Checa se todos os IDs são únicos
checagem_id_unico = dados_exportacao_vinho.iloc[:,0]
checagem_id_unico.is_unique

#Checa se existe valor nulo na base
dados_exportacao_vinho[ dados_exportacao_vinho.isnull().any( axis = 1 ) ]

"""###Ajustes na base para melhorar a análise"""

#Coloca o país como index e retira as colunas desnecessárias
dados_tratamento = dados_exportacao_vinho.set_index( dados_exportacao_vinho['País'] )
dados_tratamento.drop( ['Id', 'País'], axis = 1, inplace = True )
dados_tratamento.head()

#Altera o nome das colunas para se adequar ao que realmente significa
for col in dados_tratamento.columns:
  if col[-2:] == '.1':
    dados_tratamento.rename( columns = { col: col[:-2] + ' valor_usd' }, inplace = True )
  else:
    dados_tratamento.rename( columns = { col: col + ' litro' }, inplace = True )
dados_tratamento.head()

#Salva os dados tratados no DataFrame principal
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

#Ajusta os dados para parecer uma tabela comum utilizada em banco de dados
#Também separa as colunas unificadas de ano e medida, ajusta o nome e a ordem das colunas
dados_tratamento = dados_exportacao_vinho.reset_index().melt( id_vars = ['País'], value_vars = dados_exportacao_vinho.columns )
dados_tratamento['ano'], dados_tratamento['medida'] = zip( *dados_tratamento['variable'].str.split() )
dados_tratamento.drop( 'variable', axis = 1, inplace = True )
dados_tratamento.columns = [ 'pais', 'valor', 'ano', 'medida' ]
dados_tratamento = dados_tratamento[ [ 'ano', 'pais', 'medida', 'valor' ] ]
dados_tratamento.head()

#Salva os dados tratados no DataFrame principal
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

#Combina os valores de ano e pais em uma única coluna
dados_tratamento = dados_exportacao_vinho
dados_tratamento['combinacao'] = dados_tratamento["ano"].astype(str) + '___' + dados_tratamento["pais"]
dados_tratamento.drop( [ 'ano', 'pais' ], axis = 1, inplace = True )
dados_tratamento.head(200)

#Realiza o tratamento para levar as medidas "Litro" e "Valor_USD" para as colunas usando o pivot()
dados_tratamento = dados_tratamento.pivot( index = 'combinacao', columns = 'medida', values = 'valor' ).reset_index()
dados_tratamento.columns.name=None
dados_tratamento.head()

#Separa a coluna de combinação de volta em ano e país e reordena as colunas
dados_tratamento['ano'], dados_tratamento['pais_destino'] = zip( *dados_tratamento['combinacao'].str.split( '___' ) )
dados_tratamento.drop( 'combinacao', axis = 1, inplace = True )
dados_tratamento['pais_origem'] = 'Brasil'
dados_tratamento = dados_tratamento[ [ 'ano', 'pais_origem', 'pais_destino', 'litro', 'valor_usd' ] ]
dados_tratamento.head()

#ajusta a coluna ano
dados_tratamento['ano'] = pd.to_numeric( dados_tratamento['ano'] )
dados_tratamento.dtypes

#Salva os dados tratados no DataFrame principal
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

"""###Retira os registros cujo valores de litro e valor_usd estejam zerados"""

#Realiza o filtro
filtro = dados_exportacao_vinho['litro'] != 0
dados_tratamento = dados_exportacao_vinho[filtro]
dados_tratamento.reset_index( inplace = True, drop = True )
dados_tratamento

#Salva os dados tratados
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

"""###Parâmetro de ano para filtrar a base"""

#Ajusta o parâmetro para olhar os últimos 15 anos
var_ano_inicio = dados_exportacao_vinho['ano'].max() - 15
print( var_ano_inicio )

"""###Filtrando o ano na base"""

#Filtra o ano com base no parâmetro e reajusta o index
dados_tratamento = dados_exportacao_vinho.query( 'ano >= @var_ano_inicio' ).reset_index( drop = True )
dados_tratamento.head()

#Salva os dados tratados no DataFrame principal
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

"""###Inserindo informação de continente de destino"""

dados_exportacao_vinho['pais_destino'].unique()

# Dicionário de países e continentes -- gerado pelo Chat GPT [25/10/2023]
paises_e_continentes = {
    'Alemanha, República Democrática': 'Europa',
    'Angola': 'África',
    'Antilhas Holandesas': 'América Central',
    'Austrália': 'Oceania',
    'Bolívia': 'América do Sul',
    'Bélgica': 'Europa',
    'Canadá': 'América do Norte',
    'Chile': 'América do Sul',
    'China': 'Ásia',
    'Cingapura': 'Ásia',
    'Coreia, Republica Sul': 'Ásia',
    'Cuba': 'América do Norte',
    'Dinamarca': 'Europa',
    'Equador': 'América do Sul',
    'Estados Unidos': 'América do Norte',
    'Estônia': 'Europa',
    'França': 'Europa',
    'Itália': 'Europa',
    'Japão': 'Ásia',
    'Luxemburgo': 'Europa',
    'México': 'América do Norte',
    'Noruega': 'Europa',
    'Panamá': 'América Central',
    'Paraguai': 'América do Sul',
    'Países Baixos': 'Europa',
    'Portugal': 'Europa',
    'Quênia': 'África',
    'Reino Unido': 'Europa',
    'República Dominicana': 'América do Norte',
    'Rússia': 'Europa',
    'Suriname': 'América do Sul',
    'Suécia': 'Europa',
    'Suíça': 'Europa',
    'Tailândia': 'Ásia',
    'Taiwan (FORMOSA)': 'Ásia',
    'Tcheca, República': 'Europa',
    'Togo': 'África',
    'Venezuela': 'América do Sul',
    'Benin': 'África',
    'Costa Rica': 'América Central',
    'Emirados Arabes Unidos': 'Ásia',
    'Eslovaca, Republica': 'Europa',
    'Espanha': 'Europa',
    'Gana': 'África',
    'Guine Equatorial': 'África',
    'Haiti': 'América do Norte',
    'Honduras': 'América Central',
    'Hong Kong': 'Ásia',
    'Namibia': 'África',
    'Nigéria': 'África',
    'Polônia': 'Europa',
    'Argentina': 'América do Sul',
    'El Salvador': 'América Central',
    'Guatemala': 'América Central',
    'Nicaragua': 'América Central',
    'Vietnã': 'Ásia',
    'Bahamas': 'América do Norte',
    'Cabo Verde': 'África',
    'Guiana': 'América do Sul',
    'Hungria': 'Europa',
    'Irlanda': 'Europa',
    'Uruguai': 'América do Sul',
    'Aruba': 'América Central',
    'Congo': 'África',
    'Finlândia': 'Europa',
    'Nova Zelândia': 'Oceania',
    'Trinidade Tobago': 'América Central',
    'Colômbia': 'América do Sul',
    'Áustria': 'Europa',
    'Bulgária': 'Europa',
    'Camarões': 'África',
    'Catar': 'Ásia',
    'Curaçao': 'América Central',
    'Guine Bissau': 'África',
    'Letônia': 'Europa',
    'Antígua e Barbuda': 'América Central',
    'Cayman, Ilhas': 'América do Norte',
    'Chipre': 'Europa',
    'Filipinas': 'Ásia',
    'Grécia': 'Europa',
    'Libéria': 'África',
    'Malta': 'Europa',
    'Malásia': 'Ásia',
    'Marshall, Ilhas': 'Oceania',
    'Peru': 'América do Sul',
    'São Tomé e Príncipe': 'África',
    'Turquia': 'Ásia',
    'Barbados': 'América Central',
    'Barein': 'Ásia',
    'Belice': 'América Central',
    'Gibraltar': 'Europa',
    'Ilha de Man': 'Europa',
    'India': 'Ásia',
    'Montenegro': 'Europa',
    'Serra Leoa': 'África',
    'África do Sul': 'África',
    'Bangladesh': 'Ásia',
    'Bósnia-Herzegovina': 'Europa',
    'Comores': 'África',
    'Croácia': 'Europa',
    'Indonésia': 'Ásia',
    'Irã': 'Ásia',
    'Jordânia': 'Ásia',
    'Tuvalu': 'Oceania',
    'Vanuatu': 'Oceania',
    'Afeganistão': 'Ásia',
    'Brasil': 'América do Sul',
    'Dominica': 'América Central',
    'Guiana Francesa': 'América do Sul',
    'Mauritânia': 'África',
    'Nova Caledônia': 'Oceania',
    'Singapura': 'Ásia',
    'Suazilândia': 'África',
    'São Vicente e Granadinas': 'América Central',
    'Cocos (Keeling), Ilhas': 'Oceania',
    'Granada': 'América Central',
    'Moçambique': 'África',
    'Omã': 'Ásia'
}

# Exemplo de acesso ao continente de um país
dados_exportacao_vinho['continente_destino'] = dados_exportacao_vinho['pais_destino']
dados_exportacao_vinho.replace( { 'continente_destino': paises_e_continentes }, inplace = True )
dados_exportacao_vinho['real_projecao'] = 'real'
dados_exportacao_vinho = dados_exportacao_vinho[ [ 'ano', 'pais_origem', 'continente_destino', 'pais_destino', 'real_projecao', 'litro', 'valor_usd' ] ]
dados_exportacao_vinho.head()

"""###Ajustando o nome do país"""

# Lista de países e seu nome tratado -- gerado pelo Chat GPT [29/10/2023]
paises = [
    'Alemanha, República Democrática', 'Angola', 'Antilhas Holandesas', 'Austrália', 'Bolívia', 'Bélgica', 'Canadá',
    'Chile', 'China', 'Cingapura', 'Coreia, Republica Sul', 'Cuba', 'Dinamarca', 'Equador', 'Estados Unidos', 'Estônia',
    'França', 'Itália', 'Japão', 'Luxemburgo', 'México', 'Noruega', 'Panamá', 'Paraguai', 'Países Baixos', 'Portugal',
    'Quênia', 'Reino Unido', 'República Dominicana', 'Rússia', 'Suriname', 'Suécia', 'Suíça', 'Tailândia',
    'Taiwan (FORMOSA)', 'Tcheca, República', 'Togo', 'Venezuela', 'Benin', 'Costa Rica', 'Emirados Arabes Unidos',
    'Eslovaca, Republica', 'Espanha', 'Gana', 'Guine Equatorial', 'Haiti', 'Honduras', 'Hong Kong', 'Namibia', 'Nigéria',
    'Polônia', 'Argentina', 'El Salvador', 'Guatemala', 'Nicaragua', 'Vietnã', 'Bahamas', 'Cabo Verde', 'Guiana',
    'Hungria', 'Irlanda', 'Uruguai', 'Aruba', 'Congo', 'Finlândia', 'Nova Zelândia', 'Trinidade Tobago', 'Colômbia',
    'Áustria', 'Bulgária', 'Camarões', 'Catar', 'Curaçao', 'Guine Bissau', 'Letônia', 'Antígua e Barbuda',
    'Cayman, Ilhas', 'Chipre', 'Filipinas', 'Grécia', 'Libéria', 'Malta', 'Malásia', 'Marshall, Ilhas', 'Peru',
    'São Tomé e Príncipe', 'Turquia', 'Barbados', 'Barein', 'Belice', 'Gibraltar', 'Ilha de Man', 'India', 'Montenegro',
    'Serra Leoa', 'África do Sul', 'Bangladesh', 'Bósnia-Herzegovina', 'Comores', 'Croácia', 'Indonésia', 'Irã',
    'Jordânia', 'Tuvalu', 'Vanuatu', 'Afeganistão', 'Brasil', 'Dominica', 'Guiana Francesa', 'Mauritânia',
    'Nova Caledônia', 'Singapura', 'Suazilândia', 'São Vicente e Granadinas', 'Cocos (Keeling), Ilhas', 'Granada',
    'Moçambique', 'Omã'
]

nomes_em_portugues = [
    'Alemanha', 'Angola', 'Antilhas Holandesas', 'Austrália', 'Bolívia', 'Bélgica', 'Canadá', 'Chile', 'China',
    'Singapura', 'Coreia do Sul', 'Cuba', 'Dinamarca', 'Equador', 'Estados Unidos', 'Estônia', 'França', 'Itália',
    'Japão', 'Luxemburgo', 'México', 'Noruega', 'Panamá', 'Paraguai', 'Países Baixos', 'Portugal', 'Quênia',
    'Reino Unido', 'República Dominicana', 'Rússia', 'Suriname', 'Suécia', 'Suíça', 'Tailândia', 'Taiwan', 'República Tcheca',
    'Togo', 'Venezuela', 'Benin', 'Costa Rica', 'Emirados Árabes Unidos', 'República Eslovaca', 'Espanha', 'Gana',
    'Guiné Equatorial', 'Haiti', 'Honduras', 'Hong Kong', 'Namíbia', 'Nigéria', 'Polônia', 'Argentina', 'El Salvador',
    'Guatemala', 'Nicarágua', 'Vietnã', 'Bahamas', 'Cabo Verde', 'Guiana', 'Hungria', 'Irlanda', 'Uruguai', 'Aruba',
    'Congo', 'Finlândia', 'Nova Zelândia', 'Trinidad e Tobago', 'Colômbia', 'Áustria', 'Bulgária', 'Camarões', 'Catar',
    'Curaçao', 'Guiné-Bissau', 'Letônia', 'Antígua e Barbuda', 'Ilhas Cayman', 'Chipre', 'Filipinas', 'Grécia',
    'Libéria', 'Malta', 'Malásia', 'Ilhas Marshall', 'Peru', 'São Tomé e Príncipe', 'Turquia', 'Barbados', 'Barein',
    'Belize', 'Gibraltar', 'Ilha de Man', 'Índia', 'Montenegro', 'Serra Leoa', 'África do Sul', 'Bangladesh',
    'Bósnia e Herzegovina', 'Comores', 'Croácia', 'Indonésia', 'Irã', 'Jordânia', 'Tuvalu', 'Vanuatu', 'Afeganistão',
    'Brasil', 'Dominica', 'Guiana Francesa', 'Mauritânia', 'Nova Caledônia', 'Singapura', 'Suazilândia',
    'São Vicente e Granadinas', 'Ilhas Cocos (Keeling)', 'Granada', 'Moçambique', 'Omã'
]

dicionario_paises = dict( zip( paises, nomes_em_portugues ) )

dados_exportacao_vinho.replace( { 'pais_destino': dicionario_paises }, inplace = True )

"""###Dados de cotação do dólar"""

#Dados coletados no site do Banco Central [23/10/2023]
#https://dadosabertos.bcb.gov.br/
dados_cotacao_dolar = pd.read_csv( 'https://raw.githubusercontent.com/Trabalhinho/FIAP_Tech_Challenge/main/Bimestre_1/bases_sem_tratamento/base_cotacao_dolar_periodo.csv' )
dados_cotacao_dolar.head()

"""####Checando a base"""

#Checa se todas as datas são únicas
checagem_data_unica = dados_cotacao_dolar.iloc[:,2]
checagem_data_unica.is_unique

#Checa se existe valor nulo na base
dados_cotacao_dolar[ dados_cotacao_dolar.isnull().any( axis = 1 ) ]

"""####Ajustes nas colunas da base"""

#Ajuste de nomenclatura e eliminação de coluna não utilizada
dados_tratamento = dados_cotacao_dolar.drop( 'cotacaoCompra', axis = 1 )
dados_tratamento.columns = [ 'cotacao_venda', 'data' ]
dados_tratamento.head()

#Ajusta a data para trazer apenas o ano
dados_tratamento['ano'] = pd.to_numeric( pd.to_datetime( dados_tratamento['data'] ).dt.year )
dados_tratamento['cotacao_venda'] = dados_tratamento['cotacao_venda'].str.replace( ',', '.' ).astype( float )
dados_tratamento.drop( 'data', axis = 1, inplace = True )
dados_tratamento = dados_tratamento[ [ 'ano', 'cotacao_venda' ] ]
dados_tratamento.head()

#Salva os dados tratados na tabela
dados_cotacao_dolar = dados_tratamento
dados_cotacao_dolar.head()

"""####Calcula a média de cotação de venda do dólar por ano"""

dados_tratamento = dados_cotacao_dolar.groupby( ['ano'] ).mean().reset_index()
dados_tratamento.tail()

#Adiciona os dados de projeção futura da cotação do dólar
#https://www.bcb.gov.br/publicacoes/focus/25082023

dados_novos_cotacao_dolar = pd.DataFrame( {'ano': [ 2023, 2024, 2025, 2026 ]
                                          ,'cotacao_venda': [ 4.98, 5.00, 5.10, 5.15 ] } )
dados_tratamento = pd.concat( [ dados_cotacao_dolar, dados_novos_cotacao_dolar ], ignore_index=True )
dados_tratamento

#Salva os dados tratados na tabela
dados_cotacao_dolar = dados_tratamento
dados_cotacao_dolar.dtypes

"""###Realiza o cálculo de projeção futura"""

#Laço de repetição para realizar a projeção dos próximos 4 anos (2023 até 2026)
for i in range(4):
  ano_inicio_projecao = 2018 + i
  ano_projecao = 2023 + i

  dados_exportacao_vinho_proj_base = dados_exportacao_vinho.query( 'ano >= @ano_inicio_projecao' ).reset_index( drop = True )

  dados_projecao = dados_exportacao_vinho_proj_base[ ['pais_origem', 'continente_destino', 'pais_destino', 'litro', 'valor_usd' ] ]
  dados_projecao['ano'] = ano_projecao
  dados_projecao['real_projecao'] = 'projecao'

  resultado_projecao = dados_projecao.groupby(['ano', 'pais_origem', 'continente_destino',
                                               'pais_destino', 'real_projecao']).agg({'litro': 'median', 'valor_usd': 'median' }).reset_index()

  dados_exportacao_vinho = pd.concat( [ dados_exportacao_vinho, resultado_projecao ], ignore_index = True )

dados_exportacao_vinho

"""###Unifica a base de cotação com a de exportação"""

#Realiza o join das tabelas de exportação e cotação
dados_tratamento = pd.merge( dados_exportacao_vinho, dados_cotacao_dolar, on = 'ano', how='left')
dados_tratamento.head()

#Calcula o valor em R$ e arredonda a casa decimal
dados_tratamento['valor_real'] = round( dados_tratamento['valor_usd'] * dados_tratamento['cotacao_venda'], 2 )
dados_tratamento.drop( 'cotacao_venda', axis = 1, inplace = True )
dados_tratamento.head()

#Salva os dados tratados na base
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

"""###Ajuste de data


"""

dados_tratamento = dados_exportacao_vinho
dados_tratamento['data'] = pd.to_datetime( dados_tratamento['ano'], format = '%Y' )
dados_tratamento = dados_tratamento[ [ 'data', 'pais_origem', 'continente_destino', 'pais_destino', 'real_projecao', 'litro', 'valor_usd', 'valor_real' ] ]
dados_tratamento.head()

#Salva os dados tratados na base
dados_exportacao_vinho = dados_tratamento
dados_exportacao_vinho.head()

"""## **Base 2: Processamento de uvas**"""

# Dados de processamento de uvas [23/10/2023]
# http://vitibrasil.cnpuv.embrapa.br/index.php?opcao=opt_03

dados_processamento_uva = pd.read_csv( 'https://raw.githubusercontent.com/Trabalhinho/FIAP_Tech_Challenge/main/Bimestre_1/bases_sem_tratamento/base_processamento_uva.csv',
                                      sep = '\t' )
dados_processamento_uva.head()

"""###Classificação do tipo de uva"""

# Substituir valores na coluna 'control' de acordo com o prefixo

dados_processamento_uva['control'] = dados_processamento_uva['control'].str[0:3]
dados_processamento_uva.replace({'control':{'ti_': 'TINTAS', 'br_': 'BRANCAS E ROSADAS'}}, regex = True, inplace = True)

dados_processamento_uva.head()

"""###Transformar dataframe do formato largo para o formato comprido"""

filtro_colunas = dados_processamento_uva.columns[3:]
dados_processamento_uva_new = pd.melt( dados_processamento_uva, id_vars = ['control', 'cultivar'], value_vars = dados_processamento_uva[filtro_colunas],
                                      var_name = 'Ano', value_name = 'Kilogramas')

dados_processamento_uva_new

"""###Ajustes na base"""

# Renomear colunas
processamento_uvas = dados_processamento_uva_new.rename(columns = {'control': 'Tipo da uva', 'cultivar': 'Nome da uva'})

processamento_uvas.head()

# Ajustar os valores "nd" da coluna "Kilogramas"
processamento_uvas.replace({'Kilogramas':{'nd': '0'}}, regex = True, inplace = True)

processamento_uvas.head()

# Excluir valores zerados
filtro = processamento_uvas['Kilogramas'] != 0
processamento_uvas = processamento_uvas[filtro]
processamento_uvas.reset_index( inplace = True, drop = True )

processamento_uvas.head()

# Ajusta os tipos das colunas
processamento_uvas = processamento_uvas.astype( { 'Ano': 'int', 'Kilogramas': 'int' } )

processamento_uvas.dtypes

"""###Filtrando a base"""

# Retorna os últimos 15 anos:

## Antigo

#processamento_uvas['Ano'] = processamento_uvas['Ano'].astype(int)

#Ajusta o parâmetro para olhar os últimos 15 anos
#var_ano_inicio = processamento_uvas['Ano'].max() - 15

## Novo - melhor reutilizar a variável definida anteriormente para manter o mesmo ano nas duas bases

#Filtra o ano com base no parâmetro e reajusta o index
processamento_uvas_filtrada = processamento_uvas.query( 'Ano >= @var_ano_inicio' ).reset_index( drop = True )

processamento_uvas_filtrada.head()

"""###Ajuste de data"""

# Transforma o ano em data
processamento_uvas_final = processamento_uvas_filtrada
processamento_uvas_final['Data'] = pd.to_datetime( processamento_uvas_final['Ano'], format = '%Y' )
processamento_uvas_final = processamento_uvas_final[ [ 'Data', 'Tipo da uva', 'Nome da uva', 'Kilogramas' ] ]
processamento_uvas_final.head()

"""##Base 3: População mundial"""

#Dados de população mundial e sua projeção futura dividido por país [28/10/2023]
#https://population.un.org/wpp/Download/Standard/CSV/
dados_indicadores_populacao_mundial = pd.read_csv( 'https://raw.githubusercontent.com/Trabalhinho/FIAP_Tech_Challenge/main/Bimestre_1/bases_sem_tratamento/base_indicadores_populacao_mundial.csv',
                                                  sep = ',', low_memory = False, thousands = '.', decimal = ',' )

dados_indicadores_populacao_mundial.head()

"""###Separa apenas as colunas que serão usadas"""

dados_indicadores_populacao_mundial = dados_indicadores_populacao_mundial[ [ 'LocTypeID', 'LocTypeName', 'Location', 'Time', 'TPopulation1Jan', 'TPopulation1July' ] ]
dados_indicadores_populacao_mundial.head()

"""###Realiza os filtros para trazer apenas os dados necessários"""

#Verifica qual o ano máximo na base principal
var_ano_final = dados_exportacao_vinho['data'].max().year

#Realiza os filtros para trazer apenas as informações separadas por país e apenas no período necessário
dados_tratamento = dados_indicadores_populacao_mundial.query( 'LocTypeName == "Country/Area"' )
dados_tratamento = dados_tratamento.query( 'Time >= @var_ano_inicio and Time <= @var_ano_final' ).reset_index( drop = True )
dados_tratamento.head()

#Salva na base os dados tratados
dados_indicadores_populacao_mundial = dados_tratamento
dados_indicadores_populacao_mundial

"""###Ajuste do nome do país"""

#Dicionário de dados tratando o nome em inglês do país para português -- gerado pelo Chat GPT [28/10/2023]
paises_em_portugues = [
    'Alemanha', 'Angola', 'Antilhas Holandesas', 'Austrália', 'Bolívia', 'Bélgica', 'Canadá', 'Chile', 'China',
    'Cingapura', 'Coreia do Sul', 'Cuba', 'Dinamarca', 'Equador', 'Estados Unidos', 'Estados Unidos', 'Estados Unidos', 'Estônia', 'França', 'Itália',
    'Japão', 'Luxemburgo', 'México', 'Noruega', 'Panamá', 'Paraguai', 'Países Baixos', 'Portugal', 'Quênia',
    'Reino Unido', 'República Dominicana', 'Rússia', 'Suriname', 'Suécia', 'Suíça', 'Tailândia', 'Taiwan', 'República Tcheca',
    'Togo', 'Venezuela', 'Benin', 'Costa Rica', 'Emirados Árabes Unidos', 'República Eslovaca', 'Espanha', 'Gana',
    'Guiné Equatorial', 'Haiti', 'Honduras', 'Hong Kong', 'Namíbia', 'Nigéria', 'Polônia', 'Argentina', 'El Salvador',
    'Guatemala', 'Nicarágua', 'Vietnã', 'Bahamas', 'Cabo Verde', 'Guiana', 'Hungria', 'Irlanda', 'Uruguai', 'Aruba',
    'Congo', 'Finlândia', 'Nova Zelândia', 'Trinidad e Tobago', 'Colômbia', 'Áustria', 'Bulgária', 'Camarões', 'Catar',
    'Curaçao', 'Guiné-Bissau', 'Letônia', 'Antígua e Barbuda', 'Ilhas Cayman', 'Chipre', 'Filipinas', 'Grécia',
    'Libéria', 'Malta', 'Malásia', 'Ilhas Marshall', 'Peru', 'São Tomé e Príncipe', 'Turquia', 'Barbados', 'Barein',
    'Belize', 'Gibraltar', 'Ilha de Man', 'Índia', 'Montenegro', 'Serra Leoa', 'África do Sul', 'Bangladesh',
    'Bósnia e Herzegovina', 'Comores', 'Croácia', 'Indonésia', 'Irã', 'Jordânia', 'Tuvalu', 'Vanuatu', 'Afeganistão',
    'Brasil', 'Dominica', 'Guiana Francesa', 'Mauritânia', 'Nova Caledônia', 'Singapura', 'Suazilândia',
    'São Vicente e Granadinas', 'Ilhas Cocos (Keeling)', 'Granada', 'Moçambique', 'Omã'
]

paises_em_ingles = [
    'Germany', 'Angola', 'Netherlands Antilles', 'Australia', 'Bolivia (Plurinational State of)', 'Belgium', 'Canada', 'Chile', 'China',
    'Singapore', 'Republic of Korea', 'Cuba', 'Denmark', 'Ecuador', 'United States', 'United States of America', 'United States Virgin Islands', 'Estonia', 'France', 'Italy',
    'Japan', 'Luxembourg', 'Mexico', 'Norway', 'Panama', 'Paraguay', 'Netherlands', 'Portugal', 'Kenya',
    'United Kingdom', 'Dominican Republic', 'Russian Federation', 'Suriname', 'Sweden', 'Switzerland', 'Thailand', 'China, Taiwan Province of China', 'Czechia',
    'Togo', 'Venezuela (Bolivarian Republic of)', 'Benin', 'Costa Rica', 'United Arab Emirates', 'Slovakia', 'Spain', 'Ghana',
    'Equatorial Guinea', 'Haiti', 'Honduras', 'China, Hong Kong SAR', 'Namibia', 'Nigeria', 'Poland', 'Argentina', 'El Salvador',
    'Guatemala', 'Nicaragua', 'Viet Nam', 'Bahamas', 'Cabo Verde', 'Guyana', 'Hungary', 'Ireland', 'Uruguay', 'Aruba',
    'Congo', 'Finland', 'New Zealand', 'Trinidad and Tobago', 'Colombia', 'Austria', 'Bulgaria', 'Cameroon', 'Qatar',
    'Curaçao', 'Guinea-Bissau', 'Latvia', 'Antigua and Barbuda', 'Cayman Islands', 'Cyprus', 'Philippines', 'Greece',
    'Liberia', 'Malta', 'Malaysia', 'Marshall Islands', 'Peru', 'Sao Tome and Principe', 'Türkiye', 'Barbados', 'Bahrain',
    'Belize', 'Gibraltar', 'Isle of Man', 'India', 'Montenegro', 'Sierra Leone', 'South Africa', 'Bangladesh',
    'Bosnia and Herzegovina', 'Comoros', 'Croatia', 'Indonesia', 'Iran (Islamic Republic of)', 'Jordan', 'Tuvalu', 'Vanuatu', 'Afghanistan',
    'Brazil', 'Dominica', 'French Guiana', 'Mauritania', 'New Caledonia', 'Singapore', 'Eswatini', 'Saint Vincent and the Grenadines',
    'Cocos (Keeling) Islands', 'Grenada', 'Mozambique', 'Oman'
]

dicionario_paises_ingles_portugues = dict( zip( paises_em_ingles, paises_em_portugues ) )

#dicionario_paises_ingles_portugues
paises_ingles_portugues = pd.DataFrame( list( dicionario_paises_ingles_portugues.items() ), columns = ["Location", "pais"] )
base_paises_ingles_portugues = paises_ingles_portugues['Location']

#Implementação do dicionário de dados para ajuste do nome e ajuste dos nomes das colunas
base_dados_indicadores_populacao_mundial = pd.merge( dados_indicadores_populacao_mundial, base_paises_ingles_portugues, on = 'Location', how='inner')
base_dados_indicadores_populacao_mundial.replace( { 'Location': dicionario_paises_ingles_portugues }, inplace = True )
#base_dados_indicadores_populacao_mundial[ ( base_dados_indicadores_populacao_mundial['Location'] == 'Rússia' ) ]
base_dados_indicadores_populacao_mundial = base_dados_indicadores_populacao_mundial.rename( columns = {'Location': 'pais_origem', 'TPopulation1Jan': 'populacao'} )
base_dados_indicadores_populacao_mundial.head()

"""###Ajuste de data"""

base_dados_indicadores_populacao_mundial['data'] = pd.to_datetime( base_dados_indicadores_populacao_mundial['Time'], format = '%Y' )
base_dados_indicadores_populacao_mundial = base_dados_indicadores_populacao_mundial[ [ 'data', 'pais_origem', 'populacao' ] ]
base_dados_indicadores_populacao_mundial
#base_dados_indicadores_populacao_mundial.Location.unique()

"""##Base 4: Produção de vinhos"""

# Dados de produção de vinhos [29/10/2023]
# http://vitibrasil.cnpuv.embrapa.br/index.php?opcao=opt_02
dados_producao_vinho = pd.read_csv( 'https://raw.githubusercontent.com/Trabalhinho/FIAP_Tech_Challenge/main/Bimestre_1/bases_sem_tratamento/base_producao_vinho.csv',
                                   sep = ';' )
dados_producao_vinho.head()

"""###Identifica o Tipo de vinho produzido"""

# Repetição para preencher o tipo do vinho para cada linha
qtde_linhas_producao_vinho = dados_producao_vinho.shape[0]

for i in range( qtde_linhas_producao_vinho ):

  nome_produto = dados_producao_vinho.loc[ i, 'produto' ]

  if nome_produto.isupper() == True:
    tipo_produto = nome_produto
    dados_producao_vinho.drop( i, inplace = True )

  else:
    dados_producao_vinho.loc[ i, 'tipo_vinho' ] = tipo_produto

dados_producao_vinho.reset_index( drop = True, inplace = True)
dados_producao_vinho.head()

"""###Transformar dataframe do formato largo para o formato comprido"""

filtro_colunas_producao_vinho = dados_producao_vinho.columns[2:55]
dados_tratamento = pd.melt( dados_producao_vinho, id_vars = [ 'tipo_vinho', 'produto' ],
                            value_vars = dados_producao_vinho[filtro_colunas_producao_vinho],
                            var_name = 'ano', value_name = 'litro')

dados_tratamento.head()

dados_producao_vinho = dados_tratamento
dados_producao_vinho.head()

"""###Ajusta os tipos das colunas da tabela"""

dados_producao_vinho.dtypes

dados_producao_vinho['ano'] = dados_producao_vinho['ano'].astype( int )
dados_producao_vinho.dtypes

"""###Realiza o filtro de data"""

dados_producao_vinho = dados_producao_vinho.query( 'ano >= @var_ano_inicio' ).reset_index( drop = True )
dados_producao_vinho.head()

"""###Ajuste de data"""

dados_producao_vinho['data'] = pd.to_datetime( dados_producao_vinho['ano'], format = '%Y' )
dados_producao_vinho = dados_producao_vinho[ [ 'data', 'tipo_vinho', 'produto', 'litro' ] ]
dados_producao_vinho.rename( columns = { 'produto': 'vinho' }, inplace = True )
dados_producao_vinho.head()

"""##Base 5: Consumo de vinho por país"""

#Base de consumo de vinho por país de 2018 até 2021 (com projeção de 2022) [29/10/2023]
#https://www.oiv.int/sites/default/files/documents/OIV_State_of_the_world_Vine_and_Wine_sector_in_2022_2.pdf
dados_consumo_vinho_pais = pd.read_csv( 'https://raw.githubusercontent.com/Trabalhinho/FIAP_Tech_Challenge/main/Bimestre_1/bases_sem_tratamento/base_consumo_vinho_pais.csv',
                                       sep = ';', encoding = 'utf-8' )
dados_consumo_vinho_pais

"""###Realiza o ajuste das colunas percentuais"""

dados_consumo_vinho_pais['22/21 % Var'] = dados_consumo_vinho_pais['22/21 % Var'].str.rstrip('%').astype('float') / 100.0
dados_consumo_vinho_pais['2022 % world'] = dados_consumo_vinho_pais['2022 % world'].str.rstrip('%').astype('float') / 100.0
dados_consumo_vinho_pais

"""###Ajusta o nome dos paises"""

dicionario_paises_consumo_vinho = {
    'USA': 'Estados Unidos',
    'France': 'França',
    'Italy': 'Itália',
    'Germany': 'Alemanha',
    'UK': 'Reino Unido',
    'Russia': 'Rússia',
    'Spain': 'Espanha',
    'China': 'China',
    'Argentina': 'Argentina',
    'Portugal': 'Portugal',
    'Australia': 'Austrália',
    'South Africa': 'África do Sul',
    'Canada': 'Canadá',
    'Romania': 'Romênia',
    'Netherlands': 'Países Baixos',
    'Brazil': 'Brasil',
    'Japan': 'Japão',
    'Switzerland': 'Suíça',
    'Austria': 'Áustria',
    'Czech Republic': 'República Tcheca',
    'Belgium': 'Bélgica',
    'Sweden': 'Suécia',
    'Other countries': 'Outros países',
    'World total': 'Total mundial'
}

dados_consumo_vinho_pais.replace( { 'mhl': dicionario_paises_consumo_vinho }, inplace = True )
dados_consumo_vinho_pais

"""###Transformar dataframe do formato largo para o formato comprido"""

dados_consumo_vinho_pais.rename( columns = { 'mhl': 'pais', '2021 Prov.': '2021',	'2022 Prel.': '2022',
                                             '22/21 % Var': 'variacao_2021_2022',	'2022 % world': 'percentual_total' },
                                 inplace = True )

filtro_colunas_consumo_vinho_pais = dados_consumo_vinho_pais.columns[1:6]
dados_consumo_vinho_pais = pd.melt( dados_consumo_vinho_pais, id_vars = [ 'pais', 'variacao_2021_2022', 'percentual_total' ],
                            value_vars = dados_consumo_vinho_pais[filtro_colunas_consumo_vinho_pais],
                            var_name = 'ano', value_name = 'litro')

dados_consumo_vinho_pais.head()

"""###Tratamento nas colunas referente ao litro"""

# Os dados estão em mhl (milhão de hectolitros). Portanto, devemos multiplicar por 1 milhão a fim de ter o número de hectolitro.
# Após isso, é necessário converter hectolitro para litro. 1 hectolitro equivale a 100 litros e, por isso, multiplicamos por 100.
dados_consumo_vinho_pais['milhao_litro'] = dados_consumo_vinho_pais['litro']
dados_consumo_vinho_pais.loc[ :, 'litro' ] = ( dados_consumo_vinho_pais.loc[ :, 'litro' ] * 1000000 ) * 100
dados_consumo_vinho_pais[ 'milhao_litro' ] = dados_consumo_vinho_pais[ 'milhao_litro' ] * 100
dados_consumo_vinho_pais

"""###Ajuste do tipo das colunas"""

dados_consumo_vinho_pais.dtypes

dados_consumo_vinho_pais['ano'] = dados_consumo_vinho_pais['ano'].astype( int )
dados_consumo_vinho_pais.dtypes

"""###Criação da coluna de tipo do dado"""

dicionario_ano_tipo_dado_consumo_vinho = {
     2018: 'real'
    ,2019: 'real'
    ,2020: 'real'
    ,2021: 'provisorio'
    ,2022: 'previsto'
}

dados_consumo_vinho_pais['tipo_dado'] = dados_consumo_vinho_pais[ 'ano' ]
dados_consumo_vinho_pais.replace( { 'tipo_dado': dicionario_ano_tipo_dado_consumo_vinho }, inplace = True )
dados_consumo_vinho_pais.head()

"""###Ajuste de data"""

dados_consumo_vinho_pais['data'] = pd.to_datetime( dados_consumo_vinho_pais['ano'], format = '%Y' )
dados_consumo_vinho_pais = dados_consumo_vinho_pais[ [ 'data', 'pais', 'tipo_dado', 'litro', 'milhao_litro', 'variacao_2021_2022', 'percentual_total' ] ]
dados_consumo_vinho_pais.head()

"""##Exportação das bases"""

#Exportação da base de exportação de vinho

##Descomentar caso precise baixar novamente
#dados_exportacao_vinho.to_csv( 'base_tratada_exportacao_vinho.csv' )
#files.download( 'base_tratada_exportacao_vinho.csv' )

##Exportação da base de processamento de uvas

##Descomentar caso precise baixar novamente
#processamento_uvas_final.to_csv( 'base_tratada_processamento_uvas.csv' )
#files.download( 'base_tratada_processamento_uvas.csv' )

##Exportação da base de indicadores da população mundial

##Descomentar caso precise baixar novamente
#base_dados_indicadores_populacao_mundial.to_csv( 'base_tratada_populacao_mundial.csv' )
#files.download( 'base_tratada_populacao_mundial.csv' )

##Exportação da base de produção de vinho

##Descomentar caso precise baixar novamente
#dados_producao_vinho.to_csv( 'base_tratada_producao_vinho.csv' )
#files.download( 'base_tratada_producao_vinho.csv' )

##Exportação da base de consumo de vinho por país

##Descomentar caso precise baixar novamente
#dados_consumo_vinho_pais.to_csv( 'base_tratada_consumo_vinho_pais.csv' )
#files.download( 'base_tratada_consumo_vinho_pais.csv' )